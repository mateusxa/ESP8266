

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Jul 26 20:54:00 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	text5,local,class=CODE,merge=1,delta=2
    12                           	psect	text6,local,class=CODE,merge=1,delta=2
    13                           	psect	text7,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F628A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0015                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0017                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001F                     	;# 
    76  0081                     	;# 
    77  0085                     	;# 
    78  0086                     	;# 
    79  008C                     	;# 
    80  008E                     	;# 
    81  0092                     	;# 
    82  0098                     	;# 
    83  0099                     	;# 
    84  009A                     	;# 
    85  009B                     	;# 
    86  009C                     	;# 
    87  009D                     	;# 
    88  009F                     	;# 
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  000A                     	;# 
    97  000B                     	;# 
    98  000C                     	;# 
    99  000E                     	;# 
   100  000E                     	;# 
   101  000F                     	;# 
   102  0010                     	;# 
   103  0011                     	;# 
   104  0012                     	;# 
   105  0015                     	;# 
   106  0015                     	;# 
   107  0016                     	;# 
   108  0017                     	;# 
   109  0018                     	;# 
   110  0019                     	;# 
   111  001A                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  008C                     	;# 
   117  008E                     	;# 
   118  0092                     	;# 
   119  0098                     	;# 
   120  0099                     	;# 
   121  009A                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009F                     	;# 
   126  000B                     _INTCONbits	set	11
   127  0019                     _TXREG	set	25
   128  0006                     _PORTB	set	6
   129  0005                     _PORTA	set	5
   130  0018                     _RCSTAbits	set	24
   131  000C                     _PIR1bits	set	12
   132  0086                     _TRISB	set	134
   133  0085                     _TRISA	set	133
   134  008C                     _PIE1bits	set	140
   135  0099                     _SPBRG	set	153
   136  0098                     _TXSTAbits	set	152
   137  0081                     _OPTION_REG	set	129
   138                           
   139                           	psect	cinit
   140  000B                     start_initialization:	
   141                           ; #config settings
   142                           
   143  000B                     __initialization:
   144  000B                     end_of_initialization:	
   145                           ;End of C runtime variable initialization code
   146                           
   147  000B                     __end_of__initialization:
   148  000B  0183               	clrf	3
   149  000C  2867               	ljmp	_main	;jump to C main() function
   150                           
   151                           	psect	cstackCOMMON
   152  0070                     __pcstackCOMMON:
   153  0070                     ?_MCUconfig:
   154  0070                     ?_writeRS:	
   155                           ; 1 bytes @ 0x0
   156                           
   157  0070                     ?_GPIOconfig:	
   158                           ; 1 bytes @ 0x0
   159                           
   160  0070                     ?_USARTconfig:	
   161                           ; 1 bytes @ 0x0
   162                           
   163  0070                     ?_INTconfig:	
   164                           ; 1 bytes @ 0x0
   165                           
   166  0070                     ?_testBuffer:	
   167                           ; 1 bytes @ 0x0
   168                           
   169  0070                     ?_main:	
   170                           ; 1 bytes @ 0x0
   171                           
   172  0070                     ?_USART_interruption:	
   173                           ; 1 bytes @ 0x0
   174                           
   175  0070                     ??_USART_interruption:	
   176                           ; 1 bytes @ 0x0
   177                           
   178                           
   179                           ; 1 bytes @ 0x0
   180  0070                     	ds	2
   181  0072                     ??_MCUconfig:
   182  0072                     ??_writeRS:	
   183                           ; 1 bytes @ 0x2
   184                           
   185  0072                     ??_GPIOconfig:	
   186                           ; 1 bytes @ 0x2
   187                           
   188  0072                     ??_USARTconfig:	
   189                           ; 1 bytes @ 0x2
   190                           
   191  0072                     ??_INTconfig:	
   192                           ; 1 bytes @ 0x2
   193                           
   194  0072                     ??_testBuffer:	
   195                           ; 1 bytes @ 0x2
   196                           
   197  0072                     ??_main:	
   198                           ; 1 bytes @ 0x2
   199                           
   200                           
   201                           	psect	maintext
   202  0067                     __pmaintext:	
   203                           ; 1 bytes @ 0x2
   204 ;;
   205 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   206 ;;
   207 ;; *************** function _main *****************
   208 ;; Defined at:
   209 ;;		line 18 in file "main.c"
   210 ;; Parameters:    Size  Location     Type
   211 ;;		None
   212 ;; Auto vars:     Size  Location     Type
   213 ;;		None
   214 ;; Return value:  Size  Location     Type
   215 ;;                  1    wreg      void 
   216 ;; Registers used:
   217 ;;		wreg, status,2, status,0, pclath, cstack
   218 ;; Tracked objects:
   219 ;;		On entry : B00/0
   220 ;;		On exit  : 0/0
   221 ;;		Unchanged: 0/0
   222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   223 ;;      Params:         0       0       0       0
   224 ;;      Locals:         0       0       0       0
   225 ;;      Temps:          0       0       0       0
   226 ;;      Totals:         0       0       0       0
   227 ;;Total ram usage:        0 bytes
   228 ;; Hardware stack levels required when called: 3
   229 ;; This function calls:
   230 ;;		_MCUconfig
   231 ;;		_writeRS
   232 ;; This function is called by:
   233 ;;		Startup code after reset
   234 ;; This function uses a non-reentrant model
   235 ;;
   236                           
   237                           
   238                           ;psect for function _main
   239  0067                     _main:
   240  0067                     l704:	
   241                           ;incstack = 0
   242                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   243                           
   244                           
   245                           ;main.c: 20:     MCUconfig();
   246  0067  2058               	fcall	_MCUconfig
   247                           
   248                           ;main.c: 21:     writeRS();
   249  0068  2026               	fcall	_writeRS
   250  0069                     l41:	
   251                           ;main.c: 23:     while(1){
   252                           
   253  0069                     l42:	
   254                           ;main.c: 25:     }
   255                           
   256  0069  2869               	goto	l41
   257  006A  280A               	ljmp	start
   258  006B                     __end_of_main:
   259                           
   260                           	psect	text1
   261  0026                     __ptext1:	
   262 ;; *************** function _writeRS *****************
   263 ;; Defined at:
   264 ;;		line 92 in file "main.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;		None
   267 ;; Auto vars:     Size  Location     Type
   268 ;;		None
   269 ;; Return value:  Size  Location     Type
   270 ;;                  1    wreg      void 
   271 ;; Registers used:
   272 ;;		wreg, status,2, status,0, pclath, cstack
   273 ;; Tracked objects:
   274 ;;		On entry : 0/0
   275 ;;		On exit  : 0/0
   276 ;;		Unchanged: 0/0
   277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   278 ;;      Params:         0       0       0       0
   279 ;;      Locals:         0       0       0       0
   280 ;;      Temps:          0       0       0       0
   281 ;;      Totals:         0       0       0       0
   282 ;;Total ram usage:        0 bytes
   283 ;; Hardware stack levels used: 1
   284 ;; Hardware stack levels required when called: 2
   285 ;; This function calls:
   286 ;;		_testBuffer
   287 ;; This function is called by:
   288 ;;		_main
   289 ;; This function uses a non-reentrant model
   290 ;;
   291                           
   292                           
   293                           ;psect for function _writeRS
   294  0026                     _writeRS:
   295  0026                     l692:	
   296                           ;incstack = 0
   297                           ; Regs used in _writeRS: [wreg+status,2+status,0+pclath+cstack]
   298                           
   299                           
   300                           ;main.c: 94:     TXREG = 'A';
   301  0026  3041               	movlw	65
   302  0027  1283               	bcf	3,5	;RP0=0, select bank0
   303  0028  1303               	bcf	3,6	;RP1=0, select bank0
   304  0029  0099               	movwf	25	;volatile
   305  002A                     l694:
   306                           
   307                           ;main.c: 95:     testBuffer();
   308  002A  2060               	fcall	_testBuffer
   309  002B                     l696:
   310                           
   311                           ;main.c: 96:     TXREG = 'B';
   312  002B  3042               	movlw	66
   313  002C  1283               	bcf	3,5	;RP0=0, select bank0
   314  002D  1303               	bcf	3,6	;RP1=0, select bank0
   315  002E  0099               	movwf	25	;volatile
   316                           
   317                           ;main.c: 97:     testBuffer();
   318  002F  2060               	fcall	_testBuffer
   319  0030                     l698:
   320                           
   321                           ;main.c: 98:     TXREG = 0x0A;
   322  0030  300A               	movlw	10
   323  0031  1283               	bcf	3,5	;RP0=0, select bank0
   324  0032  1303               	bcf	3,6	;RP1=0, select bank0
   325  0033  0099               	movwf	25	;volatile
   326  0034                     l700:
   327                           
   328                           ;main.c: 99:     testBuffer();
   329  0034  2060               	fcall	_testBuffer
   330                           
   331                           ;main.c: 100:     TXREG = 0x0D;
   332  0035  300D               	movlw	13
   333  0036  1283               	bcf	3,5	;RP0=0, select bank0
   334  0037  1303               	bcf	3,6	;RP1=0, select bank0
   335  0038  0099               	movwf	25	;volatile
   336  0039                     l702:
   337                           
   338                           ;main.c: 101:     testBuffer();
   339  0039  2060               	fcall	_testBuffer
   340  003A                     l65:
   341  003A  0008               	return
   342  003B                     __end_of_writeRS:
   343                           
   344                           	psect	text2
   345  0060                     __ptext2:	
   346 ;; *************** function _testBuffer *****************
   347 ;; Defined at:
   348 ;;		line 105 in file "main.c"
   349 ;; Parameters:    Size  Location     Type
   350 ;;		None
   351 ;; Auto vars:     Size  Location     Type
   352 ;;		None
   353 ;; Return value:  Size  Location     Type
   354 ;;                  1    wreg      void 
   355 ;; Registers used:
   356 ;;		None
   357 ;; Tracked objects:
   358 ;;		On entry : 0/0
   359 ;;		On exit  : 0/0
   360 ;;		Unchanged: 0/0
   361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   362 ;;      Params:         0       0       0       0
   363 ;;      Locals:         0       0       0       0
   364 ;;      Temps:          0       0       0       0
   365 ;;      Totals:         0       0       0       0
   366 ;;Total ram usage:        0 bytes
   367 ;; Hardware stack levels used: 1
   368 ;; Hardware stack levels required when called: 1
   369 ;; This function calls:
   370 ;;		Nothing
   371 ;; This function is called by:
   372 ;;		_writeRS
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376                           
   377                           ;psect for function _testBuffer
   378  0060                     _testBuffer:
   379  0060                     l682:	
   380                           ;incstack = 0
   381                           ; Regs used in _testBuffer: []
   382                           
   383  0060                     l68:	
   384                           ;main.c: 106:     while(!TXSTAbits.TRMT);
   385                           
   386  0060  1683               	bsf	3,5	;RP0=1, select bank1
   387  0061  1303               	bcf	3,6	;RP1=0, select bank1
   388  0062  1C98               	btfss	24,1	;volatile
   389  0063  2865               	goto	u11
   390  0064  2866               	goto	u10
   391  0065                     u11:
   392  0065  2860               	goto	l68
   393  0066                     u10:
   394  0066                     l71:
   395  0066  0008               	return
   396  0067                     __end_of_testBuffer:
   397                           
   398                           	psect	text3
   399  0058                     __ptext3:	
   400 ;; *************** function _MCUconfig *****************
   401 ;; Defined at:
   402 ;;		line 48 in file "main.c"
   403 ;; Parameters:    Size  Location     Type
   404 ;;		None
   405 ;; Auto vars:     Size  Location     Type
   406 ;;		None
   407 ;; Return value:  Size  Location     Type
   408 ;;                  1    wreg      void 
   409 ;; Registers used:
   410 ;;		wreg, status,2, status,0, pclath, cstack
   411 ;; Tracked objects:
   412 ;;		On entry : 0/0
   413 ;;		On exit  : 0/0
   414 ;;		Unchanged: 0/0
   415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   416 ;;      Params:         0       0       0       0
   417 ;;      Locals:         0       0       0       0
   418 ;;      Temps:          0       0       0       0
   419 ;;      Totals:         0       0       0       0
   420 ;;Total ram usage:        0 bytes
   421 ;; Hardware stack levels used: 1
   422 ;; Hardware stack levels required when called: 2
   423 ;; This function calls:
   424 ;;		_GPIOconfig
   425 ;;		_INTconfig
   426 ;;		_USARTconfig
   427 ;; This function is called by:
   428 ;;		_main
   429 ;; This function uses a non-reentrant model
   430 ;;
   431                           
   432                           
   433                           ;psect for function _MCUconfig
   434  0058                     _MCUconfig:
   435  0058                     l684:	
   436                           ;incstack = 0
   437                           ; Regs used in _MCUconfig: [wreg+status,2+status,0+pclath+cstack]
   438                           
   439                           
   440                           ;main.c: 50:     OPTION_REG = 0x80;
   441  0058  3080               	movlw	128
   442  0059  1683               	bsf	3,5	;RP0=1, select bank1
   443  005A  1303               	bcf	3,6	;RP1=0, select bank1
   444  005B  0081               	movwf	1	;volatile
   445  005C                     l686:
   446                           
   447                           ;main.c: 51:     GPIOconfig();
   448  005C  204B               	fcall	_GPIOconfig
   449  005D                     l688:
   450                           
   451                           ;main.c: 52:     USARTconfig();
   452  005D  203B               	fcall	_USARTconfig
   453  005E                     l690:
   454                           
   455                           ;main.c: 53:     INTconfig();
   456  005E  206B               	fcall	_INTconfig
   457  005F                     l56:
   458  005F  0008               	return
   459  0060                     __end_of_MCUconfig:
   460                           
   461                           	psect	text4
   462  003B                     __ptext4:	
   463 ;; *************** function _USARTconfig *****************
   464 ;; Defined at:
   465 ;;		line 57 in file "main.c"
   466 ;; Parameters:    Size  Location     Type
   467 ;;		None
   468 ;; Auto vars:     Size  Location     Type
   469 ;;		None
   470 ;; Return value:  Size  Location     Type
   471 ;;                  1    wreg      void 
   472 ;; Registers used:
   473 ;;		wreg
   474 ;; Tracked objects:
   475 ;;		On entry : 0/0
   476 ;;		On exit  : 0/0
   477 ;;		Unchanged: 0/0
   478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   479 ;;      Params:         0       0       0       0
   480 ;;      Locals:         0       0       0       0
   481 ;;      Temps:          0       0       0       0
   482 ;;      Totals:         0       0       0       0
   483 ;;Total ram usage:        0 bytes
   484 ;; Hardware stack levels used: 1
   485 ;; Hardware stack levels required when called: 1
   486 ;; This function calls:
   487 ;;		Nothing
   488 ;; This function is called by:
   489 ;;		_MCUconfig
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           
   494                           ;psect for function _USARTconfig
   495  003B                     _USARTconfig:
   496  003B                     l668:	
   497                           ;incstack = 0
   498                           ; Regs used in _USARTconfig: [wreg]
   499                           
   500                           
   501                           ;main.c: 67:     TXSTAbits.TXEN = 1;
   502  003B  1683               	bsf	3,5	;RP0=1, select bank1
   503  003C  1303               	bcf	3,6	;RP1=0, select bank1
   504  003D  1698               	bsf	24,5	;volatile
   505                           
   506                           ;main.c: 68:     TXSTAbits.BRGH = 1;
   507  003E  1518               	bsf	24,2	;volatile
   508                           
   509                           ;main.c: 69:     TXSTAbits.SYNC = 0;
   510  003F  1218               	bcf	24,4	;volatile
   511  0040                     l670:
   512                           
   513                           ;main.c: 71:     SPBRG = 20 ;
   514  0040  3014               	movlw	20
   515  0041  0099               	movwf	25	;volatile
   516  0042                     l672:
   517                           
   518                           ;main.c: 74:     RCSTAbits.SPEN = 1;
   519  0042  1283               	bcf	3,5	;RP0=0, select bank0
   520  0043  1303               	bcf	3,6	;RP1=0, select bank0
   521  0044  1798               	bsf	24,7	;volatile
   522  0045                     l674:
   523                           
   524                           ;main.c: 75:     RCSTAbits.CREN = 1;
   525  0045  1618               	bsf	24,4	;volatile
   526  0046                     l676:
   527                           
   528                           ;main.c: 78:     PIR1bits.RCIF = 0;
   529  0046  128C               	bcf	12,5	;volatile
   530  0047                     l678:
   531                           
   532                           ;main.c: 79:     PIE1bits.RCIE = 1;
   533  0047  1683               	bsf	3,5	;RP0=1, select bank1
   534  0048  1303               	bcf	3,6	;RP1=0, select bank1
   535  0049  168C               	bsf	12,5	;volatile
   536  004A                     l59:
   537  004A  0008               	return
   538  004B                     __end_of_USARTconfig:
   539                           
   540                           	psect	text5
   541  006B                     __ptext5:	
   542 ;; *************** function _INTconfig *****************
   543 ;; Defined at:
   544 ;;		line 109 in file "main.c"
   545 ;; Parameters:    Size  Location     Type
   546 ;;		None
   547 ;; Auto vars:     Size  Location     Type
   548 ;;		None
   549 ;; Return value:  Size  Location     Type
   550 ;;                  1    wreg      void 
   551 ;; Registers used:
   552 ;;		None
   553 ;; Tracked objects:
   554 ;;		On entry : 0/0
   555 ;;		On exit  : 0/0
   556 ;;		Unchanged: 0/0
   557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   558 ;;      Params:         0       0       0       0
   559 ;;      Locals:         0       0       0       0
   560 ;;      Temps:          0       0       0       0
   561 ;;      Totals:         0       0       0       0
   562 ;;Total ram usage:        0 bytes
   563 ;; Hardware stack levels used: 1
   564 ;; Hardware stack levels required when called: 1
   565 ;; This function calls:
   566 ;;		Nothing
   567 ;; This function is called by:
   568 ;;		_MCUconfig
   569 ;; This function uses a non-reentrant model
   570 ;;
   571                           
   572                           
   573                           ;psect for function _INTconfig
   574  006B                     _INTconfig:
   575  006B                     l680:	
   576                           ;incstack = 0
   577                           ; Regs used in _INTconfig: []
   578                           
   579                           
   580                           ;main.c: 111:     INTCONbits.PEIE = 1;
   581  006B  170B               	bsf	11,6	;volatile
   582                           
   583                           ;main.c: 112:     INTCONbits.GIE = 1;
   584  006C  178B               	bsf	11,7	;volatile
   585  006D                     l74:
   586  006D  0008               	return
   587  006E                     __end_of_INTconfig:
   588                           
   589                           	psect	text6
   590  004B                     __ptext6:	
   591 ;; *************** function _GPIOconfig *****************
   592 ;; Defined at:
   593 ;;		line 83 in file "main.c"
   594 ;; Parameters:    Size  Location     Type
   595 ;;		None
   596 ;; Auto vars:     Size  Location     Type
   597 ;;		None
   598 ;; Return value:  Size  Location     Type
   599 ;;                  1    wreg      void 
   600 ;; Registers used:
   601 ;;		wreg
   602 ;; Tracked objects:
   603 ;;		On entry : 0/0
   604 ;;		On exit  : 0/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   607 ;;      Params:         0       0       0       0
   608 ;;      Locals:         0       0       0       0
   609 ;;      Temps:          0       0       0       0
   610 ;;      Totals:         0       0       0       0
   611 ;;Total ram usage:        0 bytes
   612 ;; Hardware stack levels used: 1
   613 ;; Hardware stack levels required when called: 1
   614 ;; This function calls:
   615 ;;		Nothing
   616 ;; This function is called by:
   617 ;;		_MCUconfig
   618 ;; This function uses a non-reentrant model
   619 ;;
   620                           
   621                           
   622                           ;psect for function _GPIOconfig
   623  004B                     _GPIOconfig:
   624  004B                     l666:	
   625                           ;incstack = 0
   626                           ; Regs used in _GPIOconfig: [wreg]
   627                           
   628                           
   629                           ;main.c: 84:     TRISA = 0xF3;
   630  004B  30F3               	movlw	243
   631  004C  1683               	bsf	3,5	;RP0=1, select bank1
   632  004D  1303               	bcf	3,6	;RP1=0, select bank1
   633  004E  0085               	movwf	5	;volatile
   634                           
   635                           ;main.c: 85:     TRISB = 0xFB;
   636  004F  30FB               	movlw	251
   637  0050  0086               	movwf	6	;volatile
   638                           
   639                           ;main.c: 88:     PORTA = 0xF7;
   640  0051  30F7               	movlw	247
   641  0052  1283               	bcf	3,5	;RP0=0, select bank0
   642  0053  1303               	bcf	3,6	;RP1=0, select bank0
   643  0054  0085               	movwf	5	;volatile
   644                           
   645                           ;main.c: 89:     PORTB = 0xFB;
   646  0055  30FB               	movlw	251
   647  0056  0086               	movwf	6	;volatile
   648  0057                     l62:
   649  0057  0008               	return
   650  0058                     __end_of_GPIOconfig:
   651                           
   652                           	psect	text7
   653  000D                     __ptext7:	
   654 ;; *************** function _USART_interruption *****************
   655 ;; Defined at:
   656 ;;		line 30 in file "main.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;		None
   659 ;; Auto vars:     Size  Location     Type
   660 ;;		None
   661 ;; Return value:  Size  Location     Type
   662 ;;                  1    wreg      void 
   663 ;; Registers used:
   664 ;;		None
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   670 ;;      Params:         0       0       0       0
   671 ;;      Locals:         0       0       0       0
   672 ;;      Temps:          2       0       0       0
   673 ;;      Totals:         2       0       0       0
   674 ;;Total ram usage:        2 bytes
   675 ;; Hardware stack levels used: 1
   676 ;; This function calls:
   677 ;;		Nothing
   678 ;; This function is called by:
   679 ;;		Interrupt level 1
   680 ;; This function uses a non-reentrant model
   681 ;;
   682                           
   683                           
   684                           ;psect for function _USART_interruption
   685  000D                     _USART_interruption:
   686  000D                     i1l706:
   687                           
   688                           ;main.c: 31:     if(PIR1bits.RCIF){
   689  000D  1283               	bcf	3,5	;RP0=0, select bank0
   690  000E  1303               	bcf	3,6	;RP1=0, select bank0
   691  000F  1E8C               	btfss	12,5	;volatile
   692  0010  2812               	goto	u2_21
   693  0011  2813               	goto	u2_20
   694  0012                     u2_21:
   695  0012  281F               	goto	i1l53
   696  0013                     u2_20:
   697  0013                     i1l708:
   698                           
   699                           ;main.c: 33:         PIR1bits.RCIF = 0;
   700  0013  128C               	bcf	12,5	;volatile
   701                           
   702                           ;main.c: 35:         if(RCSTAbits.FERR || RCSTAbits.OERR){
   703  0014  1918               	btfsc	24,2	;volatile
   704  0015  2817               	goto	u3_21
   705  0016  2818               	goto	u3_20
   706  0017                     u3_21:
   707  0017  281C               	goto	i1l52
   708  0018                     u3_20:
   709  0018                     i1l710:
   710  0018  1C98               	btfss	24,1	;volatile
   711  0019  281B               	goto	u4_21
   712  001A  281C               	goto	u4_20
   713  001B                     u4_21:
   714  001B  281F               	goto	i1l53
   715  001C                     u4_20:
   716  001C                     i1l52:
   717                           
   718                           ;main.c: 37:             RCSTAbits.CREN = 0;
   719  001C  1218               	bcf	24,4	;volatile
   720                           
   721                           ;main.c: 38:             RCSTAbits.CREN = 1;
   722  001D  1618               	bsf	24,4	;volatile
   723  001E  0009               	retfie	;# 
   724  001F                     i1l53:
   725  001F  0871               	movf	??_USART_interruption+1,w
   726  0020  008A               	movwf	10
   727  0021  0E70               	swapf	??_USART_interruption,w
   728  0022  0083               	movwf	3
   729  0023  0EFE               	swapf	btemp,f
   730  0024  0E7E               	swapf	btemp,w
   731  0025  0009               	retfie
   732  0026                     __end_of_USART_interruption:
   733  007E                     btemp	set	126	;btemp
   734  007E                     wtemp0	set	126
   735                           
   736                           	psect	intentry
   737  0004                     __pintentry:	
   738                           ;incstack = 0
   739                           ; Regs used in _USART_interruption: []
   740                           
   741  0004                     interrupt_function:
   742  007E                     saved_w	set	btemp
   743  0004  00FE               	movwf	btemp
   744  0005  0E03               	swapf	3,w
   745  0006  00F0               	movwf	??_USART_interruption
   746  0007  080A               	movf	10,w
   747  0008  00F1               	movwf	??_USART_interruption+1
   748  0009  280D               	ljmp	_USART_interruption
   749                           
   750                           	psect	config
   751                           
   752                           ;Config register CONFIG @ 0x2007
   753                           ;	Oscillator Selection bits
   754                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
   755                           ;	Watchdog Timer Enable bit
   756                           ;	WDTE = OFF, WDT disabled
   757                           ;	Power-up Timer Enable bit
   758                           ;	PWRTE = OFF, PWRT disabled
   759                           ;	RA5/MCLR/VPP Pin Function Select bit
   760                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
   761                           ;	Brown-out Detect Enable bit
   762                           ;	BOREN = OFF, BOD disabled
   763                           ;	Low-Voltage Programming Enable bit
   764                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
   765                           ;	Data EE Memory Code Protection bit
   766                           ;	CPD = OFF, Data memory code protection off
   767                           ;	Flash Program Memory Code Protection bit
   768                           ;	CP = OFF, Code protection off
   769  2007                     	org	8199
   770  2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      2       2
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _USART_interruption in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _USART_interruption in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _USART_interruption in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _USART_interruption in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                          _MCUconfig
                            _writeRS
 ---------------------------------------------------------------------------------
 (1) _writeRS                                              0     0      0       0
                         _testBuffer
 ---------------------------------------------------------------------------------
 (2) _testBuffer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MCUconfig                                            0     0      0       0
                         _GPIOconfig
                          _INTconfig
                        _USARTconfig
 ---------------------------------------------------------------------------------
 (2) _USARTconfig                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTconfig                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GPIOconfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _USART_interruption                                   2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MCUconfig
     _GPIOconfig
     _INTconfig
     _USARTconfig
   _writeRS
     _testBuffer

 _USART_interruption (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      2       2       1       14.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Jul 26 20:54:00 2021

                _USARTconfig 003B                           l41 0069                           l42 0069  
                         l62 0057                           l71 0066                           l56 005F  
                         l65 003A                           l74 006D                           l59 004A  
                         l68 0060                           u10 0066                           u11 0065  
 __end_of_USART_interruption 0026                          l700 0034                          l702 0039  
                        l704 0067                          l670 0040                          l680 006B  
                        l672 0042                          l666 004B                          l674 0045  
                        l690 005E                          l682 0060                          l676 0046  
                        l668 003B                          l684 0058                          l692 0026  
                        l678 0047                          l686 005C                          l694 002A  
                        l688 005D                          l696 002B                          l698 0030  
                ?_GPIOconfig 0070                         i1l52 001C                         i1l53 001F  
                       u2_20 0013                         u2_21 0012                         u3_20 0018  
                       u3_21 0017                         u4_20 001C                         u4_21 001B  
                       _main 0067                         btemp 007E                         start 000A  
                      ?_main 0070           __size_of_MCUconfig 0008                        i1l710 0018  
                      i1l706 000D                        i1l708 0013                        _SPBRG 0099  
                      _PORTA 0005                        _PORTB 0006                        _TRISA 0085  
                      _TRISB 0086                        _TXREG 0019           __size_of_INTconfig 0003  
                      pclath 000A                        status 0003                        wtemp0 007E  
            __end_of_writeRS 003B          __size_of_GPIOconfig 000D              __initialization 000B  
               __end_of_main 006B                       ??_main 0072            __end_of_MCUconfig 0060  
          __end_of_INTconfig 006E                       saved_w 007E                    ??_writeRS 0072  
    __end_of__initialization 000B               __pcstackCOMMON 0070                 ?_USARTconfig 0070  
               ??_GPIOconfig 0072           _USART_interruption 000D          ?_USART_interruption 0070  
                 __pmaintext 0067           __end_of_GPIOconfig 0058                   __pintentry 0004  
       ??_USART_interruption 0070                      __ptext1 0026                      __ptext2 0060  
                    __ptext3 0058                      __ptext4 003B                      __ptext5 006B  
                    __ptext6 004B                      __ptext7 000D                      _writeRS 0026  
       end_of_initialization 000B                    _RCSTAbits 0018                    _MCUconfig 0058  
                 _testBuffer 0060                    _INTconfig 006B         __size_of_USARTconfig 0010  
                  _TXSTAbits 0098                   ?_MCUconfig 0070                   ?_INTconfig 0070  
        start_initialization 000B                  ?_testBuffer 0070                    ___latbits 0000  
                ??_MCUconfig 0072                  ??_INTconfig 0072  __size_of_USART_interruption 0019  
                   ?_writeRS 0070          __size_of_testBuffer 0007            interrupt_function 0004  
                   _PIE1bits 008C                     _PIR1bits 000C                ??_USARTconfig 0072  
           __size_of_writeRS 0015                __size_of_main 0004                 ??_testBuffer 0072  
        __end_of_USARTconfig 004B                   _INTCONbits 000B                   _GPIOconfig 004B  
                   intlevel1 0000           __end_of_testBuffer 0067                   _OPTION_REG 0081  
